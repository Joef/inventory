{
  "parser": "@typescript-eslint/parser",
  "env": {
    "browser": true,
    "commonjs": true,
    "es6": true,
    "node": true
  },
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint", "simple-import-sort"],
  "rules": {
    // require camel case names
    // http://eslint.org/docs/rules/camelcase
    "camelcase": ["error", { "properties": "never" }],

    // Verify calls of super() in constructors
    // http://eslint.org/docs/rules/constructor-super
    "constructor-super": "off",

    // Require Default Case in Switch Statements
    // https://eslint.org/docs/rules/default-case
    "default-case": "off",

    // Require === and !==
    // http://eslint.org/docs/rules/eqeqeq
    "eqeqeq": ["error", "allow-null"],

    // enforce consistent linebreak style
    // http://eslint.org/docs/rules/linebreak-style
    "linebreak-style": "off",

    // require constructor names to begin with a capital letter
    // http://eslint.org/docs/rules/new-cap
    "new-cap": ["error", { "capIsNew": false }],

    // disallow `Array` constructors
    // https://eslint.org/docs/rules/no-array-constructor
    "no-array-constructor": "warn",

    // Disallow modifying variables of class declarations
    // http://eslint.org/docs/rules/no-class-assign
    "no-class-assign": "error",

    // Disallow comparisons to negative zero
    // http://eslint.org/docs/rules/no-compare-neg-zero
    "no-compare-neg-zero": "error",

    // disallow assignment operators in conditional statements
    // http://eslint.org/docs/rules/no-cond-assign
    "no-cond-assign": ["error", "always"],

    // disallow the use of console
    // http://eslint.org/docs/rules/no-console
    "no-console": "error",

    // Disallow modifying variables that are declared using const
    // http://eslint.org/docs/rules/no-const-assign
    "no-const-assign": "error",

    // disallow constant expressions in conditions
    // http://eslint.org/docs/rules/no-constant-condition
    "no-constant-condition": "warn",

    // disallow control characters in regular expressions
    // http://eslint.org/docs/rules/no-control-regex
    "no-control-regex": "error",

    // disallow the use of debugger
    // http://eslint.org/docs/rules/no-debugger
    "no-debugger": "error",

    // disallow duplicate arguments in function definitions
    // http://eslint.org/docs/rules/no-dupe-args
    "no-dupe-args": "error",

    // Disallow duplicate name in class members
    // https://eslint.org/docs/rules/no-dupe-class-members
    "no-dupe-class-members": "off",

    // disallow duplicate keys in object literals
    // http://eslint.org/docs/rules/no-dupe-keys
    "no-dupe-keys": "error",

    // Rule to disallow a duplicate case label
    // http://eslint.org/docs/rules/no-duplicate-case
    "no-duplicate-case": "error",

    // disallow empty block statements
    // http://eslint.org/docs/rules/no-empty
    "no-empty": [
      "error",
      {
        "allowEmptyCatch": true
      }
    ],

    // disallow empty character classes in regular expressions
    // http://eslint.org/docs/rules/no-empty-character-class
    "no-empty-character-class": "error",

    // Disallow Null Comparisons
    // http://eslint.org/docs/rules/no-eq-null
    "no-eq-null": "off",

    // Disallow eval()
    // http://eslint.org/docs/rules/no-eval
    "no-eval": "error",

    // disallow reassigning exceptions in catch clauses
    // http://eslint.org/docs/rules/no-ex-assign
    "no-ex-assign": "error",

    // Disallow unnecessary function binding
    // http://eslint.org/docs/rules/no-extra-bind
    "no-extra-bind": "error",

    // disallow unnecessary boolean casts
    // http://eslint.org/docs/rules/no-extra-boolean-cast
    "no-extra-boolean-cast": "off",

    // disallow reassigning function declarations
    // http://eslint.org/docs/rules/no-func-assign
    "no-func-assign": "error",

    // Disallow Implied eval()
    // http://eslint.org/docs/rules/no-implied-eval
    "no-implied-eval": "error",

    // disallow variable or function declarations in nested blocks
    // http://eslint.org/docs/rules/no-inner-declarations
    "no-inner-declarations": "error",

    // disallow invalid regular expression strings in RegExp constructors
    // http://eslint.org/docs/rules/no-invalid-regexp
    "no-invalid-regexp": "error",

    // Disallow this keywords outside of classes or class-like objects.
    // http://eslint.org/docs/rules/no-invalid-this
    "no-invalid-this": "off",

    // disallow irregular whitespace
    // http://eslint.org/docs/rules/no-irregular-whitespace
    "no-irregular-whitespace": "error",

    // Disallow Labels That Are Variables Names
    // http://eslint.org/docs/rules/no-label-var
    "no-label-var": "off",

    // Disallow Unnecessary Nested Blocks
    // http://eslint.org/docs/rules/no-lone-blocks
    "no-lone-blocks": "error",

    // Disallow Reassignment of Native Objects
    // http://eslint.org/docs/rules/no-native-reassign
    "no-native-reassign": "error",

    // disallow calling global object properties as functions
    // http://eslint.org/docs/rules/no-obj-calls
    "no-obj-calls": "error",

    // disallow variable redeclaration
    // http://eslint.org/docs/rules/no-redeclare
    "no-redeclare": "error",

    // disallow multiple spaces in regular expression literals
    // http://eslint.org/docs/rules/no-regex-spaces
    "no-regex-spaces": "error",

    // disallow certain object properties
    // http://eslint.org/docs/rules/no-restricted-properties
    "no-restricted-properties": [
      "error",
      {
        "object": "require",
        "property": "ensure",
        "message": "Please use import() instead. More info: https://webpack.js.org/guides/code-splitting-import/#dynamic-import"
      },
      {
        "object": "System",
        "property": "import",
        "message": "Please use import() instead. More info: https://webpack.js.org/guides/code-splitting-import/#dynamic-import"
      }
    ],

    // Disallows unnecessary return await
    // http://eslint.org/docs/rules/no-return-await
    "no-return-await": "off",

    // Disallow Self Compare
    // http://eslint.org/docs/rules/no-self-compare
    "no-self-compare": "error",

    // Disallow Use of the Comma Operator
    //http://eslint.org/docs/rules/no-sequences
    "no-sequences": "error",

    // disallow sparse arrays
    // http://eslint.org/docs/rules/no-sparse-arrays
    "no-sparse-arrays": "error",

    // Disallow template literal placeholder syntax in regular strings
    // http://eslint.org/docs/rules/no-template-curly-in-string
    "no-template-curly-in-string": "error",

    // disallow ternary operators
    // http://eslint.org/docs/rules/no-ternary
    "no-ternary": "off",

    // Disallow use of this/super before calling super() in constructors.
    // http://eslint.org/docs/rules/no-this-before-super
    "no-this-before-super": "off",

    // Restrict what can be thrown as an exception
    // http://eslint.org/docs/rules/no-throw-literal
    "no-throw-literal": "error",

    // disallow dangling underscores in identifiers
    // http://eslint.org/docs/rules/no-underscore-dangle
    "no-underscore-dangle": "off",

    // disallow confusing multiline expressions
    // http://eslint.org/docs/rules/no-unexpected-multiline
    "no-unexpected-multiline": "off",

    // disallow unreachable code after return, throw, continue, and break statements
    // http://eslint.org/docs/rules/no-unreachable
    "no-unreachable": "error",

    // disallow negating the left operand of relational operators
    // http://eslint.org/docs/rules/no-unsafe-negation
    "no-unsafe-negation": "error",

    // Disallow Unused Expressions
    // http://eslint.org/docs/rules/no-unused-expressions
    "no-unused-expressions": "warn",

    // Disallow Unused Variables
    // http://eslint.org/docs/rules/no-unused-vars
    "no-unused-vars": "warn",

    // Disallow Undeclared Variables
    // http://eslint.org/docs/rules/no-undef
    "no-undef": "off",

    // Disallow Early Use
    // http://eslint.org/docs/rules/no-use-before-define
    "no-use-before-define": "warn",

    // Disallow unnecessary .call() and .apply()
    // http://eslint.org/docs/rules/no-useless-call
    "no-useless-call": "off",

    // Disallow unnecessary constructor
    // https://eslint.org/docs/rules/no-useless-constructor
    "no-useless-constructor": "warn",

    // disallow `with` statements
    // https://eslint.org/docs/rules/no-with
    "no-with": "error",

    // Prefer destructuring from arrays and objects
    // http://eslint.org/docs/rules/prefer-destructuring
    "prefer-destructuring": [
      "off",
      {
        "array": true,
        "object": true
      },
      {
        "enforceForRenamedProperties": false
      }
    ],

    // require using Error objects as Promise rejection reasons
    // http://eslint.org/docs/rules/prefer-promise-reject-errors
    "prefer-promise-reject-errors": ["error", { "allowEmptyReject": true }],

    // enforce the consistent use of either backticks, double, or single quotes
    // http://eslint.org/docs/rules/quotes
    "quotes": ["error", "single", "avoid-escape"],

    // Require Radix Parameter
    // https://eslint.org/docs/rules/radix
    "radix": "off",

    // require or disallow strict mode directives
    // http://eslint.org/docs/rules/strict
    "strict": "off",

    // require calls to isNaN() when checking for NaN
    // http://eslint.org/docs/rules/use-isnan
    "use-isnan": "error",

    // enforce comparing typeof expressions against valid strings
    // http://eslint.org/docs/rules/valid-typeof
    "valid-typeof": "error",

    // ******

    "simple-import-sort/imports": [
      "error",
      {
        "groups": [
          [
            // Side effect imports.
            "^\\u0000",
            // Packages
            "^@?\\w",
            // Absolute imports and other imports such as Vue-style `@/foo`.
            "^[^.]",
            // Relative imports.
            "^\\."
          ]
        ]
      }
    ]
  }
}
